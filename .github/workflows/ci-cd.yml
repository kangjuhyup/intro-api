name: CI-CD

on:
  push:
    branches:
      - main 
jobs:
  build:
    runs-on: ubuntu-latest
    environment: CI/CD
    permissions:
      contents: read
      packages: write
    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: setup docker
      uses: docker/setup-buildx-action@v2

    - name: login contianer registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: setup yarn
      uses: actions/setup-node@v3
      with:
        node-version: 20
        cache: 'yarn'

    - name: install packages
      run: yarn install --immutable
    
    - name : create .env
      run: |
        echo "NODE_ENV=${{ vars.NODE_ENV }}" >> .env
        echo "PORT=${{ vars.PORT }}" >> .env
        echo "DB_TYPE=${{ vars.DB_TYPE }}" >> .env
        echo "DB_NAME=${{ vars.DB_NAME }}" >> .env
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
        echo "DB_USER=${{ secrets.DB_USER }}" >> .env
        echo "DB_PWD=${{ secrets.DB_PWD }}" >> .env
        echo "GMAIL_ACCOUNT=${{ secrets.GMAIL_ACCOUNT }}" >> .env
        echo "VERIFY_URL=${{ vars.VERIFY_URL }}" >> .env
        echo "GMAIL_PASSWORD=${{ secrets.GMAIL_PASSWORD }}" >> .env
        echo "BLOG_URL=${{ vars.BLOG_URL }}" >> .env
        echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
        echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
        echo "REDIS_PWD=${{ secrets.REDIS_PWD }}" >> .env
    - name: docker create
      run : docker buildx create --use

    - name: docker build & push
      run: docker buildx build --platform linux/amd64,linux/arm64 -t ghcr.io/${{ github.repository }}/service:latest --push .
    
      
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: install ssh
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass

#TODO: pm2 를 이용해 무중단 배포
    - name: deploy
      env:
        ORACLE_IP: ${{ secrets.ORACLE_INSTANCE_IP }}
        SSH_PRIVATE_KEY: ${{ secrets.ORACLE_SSH_PRIVATE_KEY }}
      run: |
        echo "$SSH_PRIVATE_KEY" > private_key
        chmod 600 private_key
        
        ssh -o StrictHostKeyChecking=no -i private_key ubuntu@$ORACLE_IP << 'EOF'
          docker login ghcr.io -u $GITHUB_ACTOR -p $GITHUB_TOKEN
          docker pull ghcr.io/${{ github.repository }}/service:latest
          docker stop jhkang-intro-api || true
          docker rm jhkang-intro-api || true
          docker run -d -p 3001:3001 --network my-network --name jhkang-intro-api ghcr.io/${{ github.repository }}/service:latest
        EOF
